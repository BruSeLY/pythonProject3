import requests
import telebot
from bs4 import BeautifulSoup
import time
from requests_html import HTMLSession
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤



#
# session = HTMLSession()
# url = "https://www.opendota.com/matches/highMmr"
# r = session.get(url)
# r.html.render(sleep=1, keep_page=True, scrolldown=1)
# matches_not_final = {}
# r = r.html.links
#
# matches = {}
# t = 0
# for i in r:
#     if len(i) == 19:
#         matches_not_final[t] = i[9:]
#         t += 1
#
# heroes = requests.get("https://api.opendota.com/api/heroes").json()

# with open ("heroes.txt", "w") as f:
#     for i in range(len(heroes)):
#         if i != len(heroes) - 1:
#             f.write(f'{heroes[i]["id"]};{heroes[i]["localized_name"]}\n')
#         else:
#             f.write(f'{(heroes[i]["id"])};{heroes[i]["localized_name"]}')

total_radiant = 0
total_dire = 0
rate = 0.5

#
# for i in range(len(matches_not_final)):
#     response = requests.get('https://api.opendota.com/api/matches/' + matches_not_final[i]).json()
#
#     radiant = []
#     dire = []
#     if "picks_bans" in response:
#         for j in range(10):
#             if response['picks_bans'][j]["team"] == 0:
#                 radiant.append(str(response["picks_bans"][j]["hero_id"]))
#             else:
#                 dire.append(str(response["picks_bans"][j]["hero_id"]))
#     sl = dict()
#     with open ("heroes.txt", "r") as f:
#         s = f.read().split("\n")
#         for row in s:
#             row = row.split(";")
#             sl[row[0]] = row[1]
#     if "radiant_win" in response:
#         radiantWin = response["radiant_win"]
#     if len(radiant) == 5 and len(dire) == 5:
#         for j in range(5):
#             radiant[j] = sl[radiant[j]]
#         for j in range(5):
#             dire[j] = sl[dire[j]]
#         with open("matches.txt", "w") as f:
#             if i < len(matches_not_final):
#                 f.write(f"{response['match_id']};{radiant};{dire};{radiantWin};{total_radiant};{total_dire};{rate}\n")
#             else:
#                 f.write(f"{response['match_id']};{radiant};{dire};{radiantWin};{total_radiant};{total_dire};{rate}")

bot = telebot.TeleBot("5678522382:AAEtQYOYSChWrI-1mItc0H6_Fq4MsLlgpAM")
gameStarted = False
users = {}
print("END")

side = ""

class User:
    def __init__(self, uid, name):
        global users
        self.user_id = uid
        self.status = "menu"
        self.points = 100
        self.name = name
        with open("user.txt", "w") as f:
            f.write(f'{uid};{name};{self.points}')

    def bet(self, msg, put_points, match):
        global side
        win_or_loss = False
        if users[msg.from_user.id].points < put_points:
            bot.send_message(msg.chat.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –ë–∞–ª–∞–Ω—Å: {users[msg.from_user.id].points}")
        else:
            with open("transaction.txt", "a") as f:
                print(len(match))
                print(match[3])

                if side == 0 and match[3] == "True":
                    win_or_loss = True
                elif side == 1 and match[3] == "False":
                    win_or_loss = True
                print(f"{win_or_loss}:: {side}:: {type(side)}:: {type(match[3])}")
                if not(win_or_loss):
                    users[msg.from_user.id].points -= put_points
                    f.write(f'{msg.from_user.id};{self.points};{put_points};{side}{win_or_loss}')
                    bot.send_message(msg.chat.id, f"@{self.name}, –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {put_points} –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ë–∞–ª–∞–Ω—Å: {users[msg.from_user.id].points}")
                else:
                    users[msg.from_user.id].points += (float(match[-1]) * put_points)
                    f.write(f'{msg.from_user.id};{self.points};{put_points};{side}{win_or_loss}')
                    bot.send_message(msg.chat.id, f"@{self.name}, –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {put_points} –∏ –ø–æ–±–µ–¥–∏–ª–∏. –ë–∞–ª–∞–Ω—Å: {users[msg.from_user.id].points}")
                bot.send_message(msg.chat.id, f"@{self.name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–≥—Ä–∞–µ—Ç–µ –≤ –Ω–∞—à—É –∏–≥—Ä—É!!!")
        side = None
        win_or_loss = False

    def get_status(self):
        return self.status

match = ""
@bot.message_handler(content_types=["text"])
def main_text_logic(msg):
    global match
    global users
    if msg.from_user.id not in users:
        users[msg.from_user.id] = User(msg.from_user.id, msg.from_user.first_name)
    print(users[msg.from_user.id].user_id, users[msg.from_user.id].points, users[msg.from_user.id].status)
    usr = User(msg.from_user.id, msg.from_user.first_name)

    if "@dota2predict" in msg.text.lower():
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—á–∫–∏")
        markup1.add(btn1)
        bot.send_message(msg.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {msg.from_user.first_name}. –•–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–∞—Ç—á?",
                         reply_markup=markup1)
        if msg.text.lower() in "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—á–∫–∏":
            with open("matches.txt", "r+") as f:
                f = f.read().split("\n")
                match = f[0].split(';')

                print(match)
                direThis1 = match[2][1:-1].split(", ")
                direThis = [i[1:-1] for i in direThis1]
                radiantThis1 = match[1][1:-1].split(", ")
                radiantThis = [i[1:-1] for i in radiantThis1]
                print(radiantThis, direThis)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn1 = types.KeyboardButton("bet Radiant")
                btn2 = types.KeyboardButton("bet Dire")
                markup.add(btn1, btn2)
                bot.send_message(msg.chat.id, f'@{msg.from_user.first_name} \nRadiant: {", ".join(radiantThis)}\nDire: {", ".join(direThis)}\n–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç: {match[6]}', reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(msg.chat.id, f'@{msg.from_user.first_name} \n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–±–µ–¥–∏—Ç\n–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–≤–µ–¥–∏—Ç–µ <bet Radiant> –∏–ª–∏ <bet Dire> –±–µ–∑ –∫–æ–≤—ã—á–µ–∫', reply_markup=markup)
                users[msg.from_user.id].status = "vote"
    if users[msg.from_user.id].status == "vote":
        vote(msg)
    if users[msg.from_user.id].status == "bet":
        play(msg, usr, match)


def play(msg, usr, match):
    if "bet" in msg.text.lower():
        if msg.text.split()[1].isdigit():
            stavka = int(msg.text.split()[1])
            print(usr.bet(msg, stavka, match))
            users[msg.from_user.id].status = "menu"


def vote(msg):
    global side
    if "bet" in msg.text.lower():
        if "bet radiant" == msg.text.lower():
            bot.send_message(msg.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É Radiant",
                             reply_markup=types.ReplyKeyboardRemove())
            side = 0
            bot.send_message(msg.chat.id, f"@{msg.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —á–µ—Ä–µ–∑ <bet –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤> –±–µ–∑ –∫–æ–≤—ã—á–µ–∫")
            users[msg.from_user.id].status = "bet"
        if "bet dire" == msg.text.lower():
            bot.send_message(msg.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É Dire",
                             reply_markup=types.ReplyKeyboardRemove())
            side = 1
            bot.send_message(msg.chat.id, f"@{msg.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —á–µ—Ä–µ–∑ <bet –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤> –±–µ–∑ –∫–æ–≤—ã—á–µ–∫")
            users[msg.from_user.id].status = "bet"

# @bot.message_handler(commands=['–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–∞—Ç—á'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton("üëã Radiant")
#     btn2 = types.KeyboardButton("bet Dire")
#     markup.add(btn1, btn2)
#     bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ç–≤–æ–µ–π —Å—Ç–∞—Ç—å–∏ –¥–ª—è habr.com".format(message.from_user), reply_markup=markup)





bot.polling(none_stop=True, interval=0)
